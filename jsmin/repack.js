plugin("ZIP");function isRepackJar(a){var b=!0,c=new ZIP;try{c.loadFile(a);var d=c.list();for(i in d)d[i].name.match(/jarinjarloader/)&&d[i].name.match(/eclipse/)&&(b=!1)}catch(e){}c.close();return b}
function getModulesToExclude(){loadUnderscore();var a=__expr.split(/,/),b=[],c=io.readFile(getOpenAFJar()+"::versionsAndDeps.json");for(i in a)var d=_.flatten($from(c.plugins).equals("name",a[i]).equals("removable",!0).select(function(a){return a.deps})),e=_.flatten($from(c.plugins).not().equals("name",a[i]).select(function(a){return a.deps})),b=b.concat(_.without(d,e));return _.uniq(b)}
try{var curDir=java.lang.System.getProperty("user.dir")+"",classPath=java.lang.System.getProperty("java.class.path")+""}catch(a){logErr("Couldn't retrieve system properties: "+a.message),java.lang.System.exit(0)}log("Repacking OpenAF for faster loading");var zip=new ZIP,zipNew=new ZIP,irj=isRepackJar(classPath);
try{packJson=jsonParse(af.fromBytes2String(zip.streamGetFile(getOpenAFJar(),".package.json")));packJson.version=getVersion();var fileDB=getOpenAFPath()+"/"+PACKAGESJSON_DB,packages={},zipdb=new ZIP;try{packages=af.fromJson(af.fromBytes2String(zipdb.streamGetFile(fileDB,PACKAGESJSON)))}catch(a){a.message.match(/FileNotFoundException/)||logErr(a.message)}isUndefined(packages)&&(packages={});packages.OpenAF=packJson;try{zipdb.streamPutFile(fileDB,PACKAGESJSON,af.fromString2Bytes(stringify(packages)))}catch(a){logErr(a.message)}if(irj&&
""==__expr)log("No repacking needed.");else{var oldVersionFile=classPath.replace(/openaf.jar/,"openaf.jar.orig");irj||(log("Backup to "+oldVersionFile),af.writeFileBytes(oldVersionFile,af.readFileBytes(classPath)));var toExclude=[];""!=__expr&&(toExclude=getModulesToExclude());zip.loadFile(oldVersionFile);var list=zip.list();for(i in list){var el=list[i];if(0<toExclude.indexOf(el.name))log("Excluding "+el.name);else if(el.name.match(/\.jar$/)){var zipTemp=new ZIP;zipTemp.load(zip.getFile(el.name));
var listTemp=zipTemp.list();for(ii in listTemp){var elTemp=listTemp[ii];elTemp.name.match(/MANIFEST.MF$/)||elTemp.name.match(/ECLIPSE_.RSA$/)||zipNew.putFile(elTemp.name,zipTemp.getFile(elTemp.name))}zipTemp.close()}else if(el.name.match(/MANIFEST.MF$/)){var str=af.fromBytes2String(zip.getFile(el.name));str.match(/jarinjarloader/)&&str.match(/eclipse/)&&(str=str.replace(/org\.eclipse\.jdt\.internal\.jarinjarloader\.JarRsrcLoader/,Packages.wedo.openaf.AFCmdBase.afc.getClass().getName()),zipNew.putFile(el.name,
af.fromString2Bytes(str)))}else el.name.match(/jarinjarloader/)||zipNew.putFile(el.name,zip.getFile(el.name))}af.writeFileBytes(classPath,zipNew.generate({compressionLevel:9}));zip.close();zipNew.close()}log("Done repacking OpenAF.jar");java.lang.System.exit(0)}catch(a){printErr(a),a.javaException.printStackTrace()};
